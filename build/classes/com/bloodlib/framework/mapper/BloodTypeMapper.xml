<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bloodlib.framework.mapper.BloodTypeMapper">
  <resultMap id="BaseResultMap" type="com.bloodlib.framework.model.BloodType">
    <id column="Blood_Type_Id" jdbcType="BIGINT" property="bloodTypeId" />
    <result column="Type1" jdbcType="VARCHAR" property="type1" />
    <result column="Type2" jdbcType="VARCHAR" property="type2" />
    <result column="Input_Type" jdbcType="VARCHAR" property="inputType" />
    <result column="Output_Type" jdbcType="VARCHAR" property="outputType" />
    <result column="Remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <resultMap id="type1list" type="java.lang.String">
   <result column="Type1" jdbcType="VARCHAR" property="type1" />
  </resultMap>
  
  <resultMap id="type2list" type="java.lang.String">
   <result column="Type2" jdbcType="VARCHAR" property="type2" />
  </resultMap>
  <sql id="Base_Column_List">
    Blood_Type_Id, Type1, Type2, Input_Type, Output_Type, Remark
  </sql>
 
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from blood_type
    where Blood_Type_Id = #{bloodTypeId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from blood_type
    where Blood_Type_Id = #{bloodTypeId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.bloodlib.framework.model.BloodType">
    insert into blood_type (Blood_Type_Id, Type1, Type2, 
      Input_Type, Output_Type, Remark
      )
    values (#{bloodTypeId,jdbcType=BIGINT}, #{type1,jdbcType=VARCHAR}, #{type2,jdbcType=VARCHAR}, 
      #{inputType,jdbcType=VARCHAR}, #{outputType,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.bloodlib.framework.model.BloodType">
    insert into blood_type
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bloodTypeId != null">
        Blood_Type_Id,
      </if>
      <if test="type1 != null">
        Type1,
      </if>
      <if test="type2 != null">
        Type2,
      </if>
      <if test="inputType != null">
        Input_Type,
      </if>
      <if test="outputType != null">
        Output_Type,
      </if>
      <if test="remark != null">
        Remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bloodTypeId != null">
        #{bloodTypeId,jdbcType=BIGINT},
      </if>
      <if test="type1 != null">
        #{type1,jdbcType=VARCHAR},
      </if>
      <if test="type2 != null">
        #{type2,jdbcType=VARCHAR},
      </if>
      <if test="inputType != null">
        #{inputType,jdbcType=VARCHAR},
      </if>
      <if test="outputType != null">
        #{outputType,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bloodlib.framework.model.BloodType">
    update blood_type
    <set>
      <if test="type1 != null">
        Type1 = #{type1,jdbcType=VARCHAR},
      </if>
      <if test="type2 != null">
        Type2 = #{type2,jdbcType=VARCHAR},
      </if>
      <if test="inputType != null">
        Input_Type = #{inputType,jdbcType=VARCHAR},
      </if>
      <if test="outputType != null">
        Output_Type = #{outputType,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        Remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where Blood_Type_Id = #{bloodTypeId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bloodlib.framework.model.BloodType">
    update blood_type
    set Type1 = #{type1,jdbcType=VARCHAR},
      Type2 = #{type2,jdbcType=VARCHAR},
      Input_Type = #{inputType,jdbcType=VARCHAR},
      Output_Type = #{outputType,jdbcType=VARCHAR},
      Remark = #{remark,jdbcType=VARCHAR}
    where Blood_Type_Id = #{bloodTypeId,jdbcType=BIGINT}
  </update>
  <!-- 获取血型数据集合 -->
  <select id="getBloodTypeList" resultMap="BaseResultMap">
  	select
 	<include refid="Base_Column_List" />
 	from blood_type
  </select>
  <!-- 获取血液类别1数据（去重） -->
 <select id="getBT1List" resultType="java.lang.String">
 	select distinct type1 from blood_type
 </select>
  <!-- 获取血液类别2数据（去重） -->
  <select id="getBT2List" resultType="java.lang.String">
 	select distinct type2 from blood_type
 </select>
 <!-- 获取血液类型详细信息 根据id-->
 <select id="getBloodTypeInfo" parameterType="java.lang.Long" resultMap="BaseResultMap">
 	select
 	<include refid="Base_Column_List" />
 	from blood_type 
    where Blood_Type_Id = #{bloodTypeId,jdbcType=BIGINT}
 </select>
 <!-- 通过input_Type 获取血型信息 -->
 <select id="getBloodTypeInfoByInputType">
   select 
 	<include refid="Base_Column_List" />
 	from blood_type
 	where type1 in # {inputtypelist}
 </select>
 <!-- 根据type1查询血型信息 -->
 <select id="getBTByType1" parameterType="java.lang.Long" resultMap="BaseResultMap">
 	select
 	<include refid="Base_Column_List" />
 	from blood_type
 	where type1 = #{type1,jdbcType=VARCHAR}
 </select>
 <select id="getBTInfoByType" parameterType="java.lang.String" resultMap="BaseResultMap">
 	select
 	<include refid="Base_Column_List" />
 	from blood_type
 	where type1=#{0} and type2=#{1}
 </select>
  <select id="getTypeByID" parameterType="java.lang.Long" resultType="java.lang.String">
  select Type1 from Blood_Type where Blood_Type_Id = #{bloodtypeId,jdbcType=BIGINT}
  </select>
  <select id="getOutputById" parameterType="java.lang.Long" resultType="java.lang.String">
  	select output_Type from Blood_Type where Blood_Type_Id= #{bloodTypeId,jdbcType=BIGINT}
  </select>
</mapper>